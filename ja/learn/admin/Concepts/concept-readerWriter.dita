<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic5374">
  <title>複数のreaderとwriter</title>
  <shortdesc>マルチスレッドのreaderとwriterは複数のプロセスが同時並列でディスク上のデータを読み書きできるようにします。 同時並列の読み書きはディスクスピードを向上し、ディスクからの参照レートを向上します。 </shortdesc>
  
  <body>
    
    <p>複数のreader、writerはディスクに永続化されたデータに対応しています。 以前のCouchbaseサーバは、各サーバインスタンスで単一のディスクreader、writerスレッドのみを利用していました。</p> 
      <p>単一のread/writeスレッドがディスクハードウェアのスピードに追いつかない場合、ディスクスピードを増加できます。 単一のread/writeスレッドが引き起こすもう一つの問題は、RAMではなくディスク上に大部分のデータがある場合、これらのデータをリクエストした時により多くのキャッシュミスによる影響が発生する点です。</p>
     
     
     
    <note type="note">Couchbase Serverクラスタでは、以前のバージョンのCouchbase Serverと、新しいバージョンのCouchbase Serverを同居させることができます。 2.1以前のノードはデータバケットに対し、単一のreader/writerを利用し続けます。 
      2.1以降のノードは複数のreader、writerを利用します。 </note> 
      
      <p>
      サーバノードをアップグレードすると、バケットの再起動とウォームアップにより複数のreaderとwriter設定が有効となります。 この場合、新規ノードをインストールし、クラスタに追加し、既存バケットの設定でreaderとwriterを変更します。</p> 
      <p>クラスタをリバランスすると、新規ノードが複数のreaderとwriterを利用して読み書きを実行し、データバケットは再起動またはウォームアップを必要としません。 すべての既存の2.1以前のノードはデータバケットに対し、単一のreader/writerを利用し続けます。 2.1以前のノードをアップグレードし、クラスタに追加すると、これらの新規ノードは自動的にバケットに対する複数のreaderとwriterの設定を反映します。</p>


    
    <p>マルチスレッドのエンジンは、競合を避けるために、同一のデータキャッシュにアクセスする複数のスレッド間での同期を追加しています。 データへの競合を回避しつつ、パフォーマンスを維持するために、Couchbase Serverはスレッド間でロックを利用し、静的なパーティションによるvBucket間でスレッドの割り当てを行っています。</p> 
     <p> Couchbase Serverが複数のreader、writerスレッドを作成する際、サーバは各スレッドでのvBucket範囲を算定し、各スレッドを特定のvBucketに排他的にアサインします。 
      この静的なスレッド割り当てにより、サーバは常に単一のreaderと単一のwriterスレッドのみが、同一のvBucketにアクセスするようにしています。 
      このイメージは6つの事前に割り当てられたスレッドと2つのデータバケットを示しています。 
      各スレッドは参照、更新アクセス用に、静的に分割されたvBucketの範囲を保持しています。</p>
    
    <image href="../images/threads_read_write.png" width="500"></image>
    

  </body>

</topic>
