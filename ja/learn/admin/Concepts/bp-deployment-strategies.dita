<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic3524">
  <title>デプロイ戦略</title>
  <body>
    <p>利用可能なデプロイ戦略がいくつかあります。 お使いの言語や開発環境がスマートクライアントライブラリをサポートしている場合、スマートクライアントがお勧めのデプロイ選択肢になります。 そうでない場合、最大のパフォーマンスと機能性を得るためには、クライアントサイドにMoxiを設定します。</p>
    <section><title>スマート(vBucket対応)クライアント</title><p>スマートクライアントを利用する場合、クライアントライブラリがクラスタへのインタフェースを提供し、vBucketメカニズムによるサーバの選択を直接実行します。 クライアントは独自のCouchbaseプロトコルを利用しクラスタと通信します。 これは、クライアントがvBucketマップを共有し、必要なvBucketを保持するサーバを特定し、情報をそのサーバから参照および更新することを可能にします。</p>
      <image href="../images/couchbase-060711-1157-32_img_281.jpg" width="720"/>
      <p>Couchbase Server 2.5以前のリリースでは、開発者の方が利用しているクライアントライブラリによって、初回のトポロジ設定リクエストを送信するホストをランダムに選択していました。 初回のブートストラップ以降に発生したクラスタマップの変更はサーバからのNOT_MY_VBUCKETレスポンスに基づき処理されます。 このコネクションは8091ポートで行われ、HTTPコネクションを利用しています。 </p><p>Couchbase Server 2.5以降は、クライアントライブラリがバケットの初期トポロジ設定をクラスタ内のノードから取得します。 これは以前のリリースと同様です。 しかし、この情報は11210ポートでmemcachedプロトコルを利用して転送されます(8091ポートへの永続するコネクションではない)。
        これはコネクションのスケーラビリティを大きく向上させます。</p>
      <note type="note">この変更はCouchbaseバケットタイプでのみ有効です(memcachedバケットでは不可)。 8091ポートに設定リクエストが送信されると、エラーを返します。
      </note></section>
    <section><title>クライアントサイド (スタンドアロン) プロキシ</title>
      <p>お使いのプラットフォームでスマートクライアントが利用できない場合、スタンドアロンプロキシをデプロイします。 これはmemcached互換のインタフェースをローカル環境で提供し、スマートクライアントと同様の機能を提供します。 クライアント側にデプロイしたスタンドアロンプロキシは、コネクションプーリングなどの有意義なサービスを提供することもできます。 以下の図はアプリケーションサーバにインストールしたスタンドアロンプロキシを利用した流れを示しています。</p>
      <image href="../images/couchbase-060711-1157-32_img_280.jpg" width="720"/>
      <p>memcachedクライアントのサーバリストには一つのサーバのみ(localhost)を設定し、すべてのオペレーションは<codeph>localhost:11211</codeph>に送信されます — プロキシがリスンするポートです。 プロキシはドキュメントIDをvBucketにハッシュし、vBucketテーブルからホストサーバを探し、適切なCouchbase Serverの11210ポートへとオペレーションを送信します。</p><p>Moxiは、Moxi 1.8シリーズをご利用ください。</p>
    </section>
    
    <section><title>サーバサイド (Couchbase組み込み) プロキシの利用</title>
      <note type="attention">サーバサイドプロキシ設定のプロダクションでの利用は <i>推奨されません</i> 。 お使いのプラットフォームや環境で、スマートクライアントまたはクライアントサイドプロキシ構成が使用できるのであれば、それらを使用してください。</note><p>サーバサイド (組み込み) プロキシはCouchbase Server内に存在し、11211ポートを利用しています。 memcachedプロトコルをサポートし、既存のアプリケーションから、別途プロキシソフトウェアをインストールすることなく、Couchbaseクラスタと通信することができます。 このアプローチの問題点はパフォーマンスです。</p><p>このデプロイ構成は典型的なmemcachedデプロイ構成と比べ、最悪のシナリオでは、サーバマッピングが2回発生し(Ketamaハッシュをクライアント側のサーバリストで利用し、プロキシ側でvBucketのハッシュをサーバマッピングで利用する)、余分なネットワークラウンドトリップホップが発生します。</p>
      <image href="../images/couchbase-060711-1157-32_img_279.jpg" width="720"/>
    </section>
    
  </body>
  <related-links>
    <linklist>
      <link href="http://dustin.github.com/2010/06/29/memcached-vbuckets.html" scope="external"
        format="html">
        <linktext>vBucketの記事</linktext>
      </link>
      <link href="http://docs.couchbase.com/moxi-guide/" scope="external"
        format="html">
        <linktext>Moxi 1.8 マニュアル</linktext>
      </link>
    </linklist>
  </related-links>
</topic>
