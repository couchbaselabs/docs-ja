<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="ja" id="concept_dqh_jk3_wn">
 <title>ワーキングセットの管理とデータ除去</title>
 <shortdesc>ワーキングセット管理は空き容量を解放し、最も利用されるアイテムがRAMに保持されるようにする処理です。 データ除去はデータをRAMから除去し、頻繁に利用されるアイテム用の空きを作る処理です。 </shortdesc>
 <conbody>
  <p> Couchbase ServerがRAM内の容量を解放する処理、そして最も利用されるアイテムをRAM内に残す処理をワーキングセット管理と呼んでいます。 データ除去はデータをRAMから除去し、頻繁に利用されるアイテム用の空きを作る処理です。 データ除去はCouchbase Serverにより自動的に実行されます。 Couchbase Serverが情報を除去するとき、ディスク永続化システムと連携しRAM内のデータがすでにディスクへ永続化され、アイテムがリクエストされた場合はディスクから安全にRAMへと復元できるようにしています。 </p>
  <p> キャッシュ層のメモリ割当量に加え、エンジンがより多くのデータをディスクに永続化すべきかを判断するために利用する二つのウォータマークがあります。 それは、<codeph>mem_low_wat</codeph>と<codeph>mem_high_wat</codeph>です。 </p>
  <p> キャッシュ層がデータで満たされると、結果的にmem_low_watを超えます。 この時点では何も起きません。 データが増加を続けると、結果的にmem_high_watに到達します。 この時点で、バックグラウンドジョブがスケジュールされ、アイテムがディスクに書き込まれたことを確認し、他のCouchbase Serverアイテム用にメモリを利用できるようにします。 このジョブはメモリがmem_low_watに到達するまで継続します。
	 アイテムの更新頻度がディスクへの書込みよりも早い場合、システムは容量不足を示すエラーを返すことがあります。 これはメモリが利用可能になるまで続きます。
	 アクティブに利用される情報のためにキャッシュからデータを削除する処理はデータの除去(ejection)と呼ばれ、Couchbase Serverクラスタの各バケットで設定された閾値を元に自動的に制御されます。 </p>
  <image href="../images/couchbase-060711-1157-32_img_300.jpg" width="300"/>
  <section>
   <title>ワーキングセット管理プロセス</title>
   <p>Couchbase Serverはアクティブにキャッシュ層に保存されたデータの管理を行います; これはクライアントによりどのデータが頻繁にアクセスされ、どのデータを高速な参照や更新のために保持すべきかの情報を利用します。
		 RAM内のアイテムが増えすぎると、Couchbase Serverは特定のデータを除去し、システム性能を維持するために空き容量を作成します。 このプロセスは"ワーキングセット管理"と呼ばれ、RAM内のデータセットを"ワーキングセット"と呼びます。</p>
   <p>一般的にはワーキングセットはすべてのキー、メタデータ、そして頻繁に利用され高速なアクセスが必要なドキュメントで構成されます。 サーバがRAMからデータを除去する処理はejectionと呼ばれます。 サーバがこのプロセスを実行すると、ドキュメントを除去しますが、アイテムのキーとメタデータは除去しません。 キーとメタデータをRAMに保持することにはシステムで3つの重要な目的があります:</p>
   <ul>
    <li>
			<p>Couchbase ServerはRAM内に残っているキーとメタデータをクライアントからリクエストされたキーに利用します。
				リクエストを受信すると、サーバはディスクからRAMへとアイテムのフェッチを試みます。</p>
    </li>
    <li>
			<p>サーバはまた、RAM内のキーとメタデータを"ミスアクセス"に利用します。
				アイテムが存在しないことを高速に判断し、存在しない場合にアイテムを挿入するなど特定のアクションを実施します。</p>
    </li>
    <li>
     <p>最後に、Couchbase Server内の期限切れアイテム削除処理でRAM内のメタデータを利用し、高速に期限切れアイテムをスキャンし、後にディスクから削除します。 このプロセスは"expiry pager"と呼ばれ、デフォルトでは60分毎に起動します。 </p>
    </li>
   </ul>
  </section>
  <section>
   <title>頻繁に参照されないアイテム</title>
   <p>サーバ内のすべてのアイテムはそのアイテムが最近アクセスされたかどうかを示すメタデータを持っています。 このメタデータはNRU(Not-Recently-Used)と呼ばれます。 アイテムが最近利用されていないと、そのアイテムは高水位を超えた際のデータ除去の候補となります。 高水位を越えると、サーバはアイテムをRAMから除去します。</p>
   <p>Couchbase Serverはアイテムごとに二つのNRUビットを利用しており、レプリケーションプロトコルで頻繁に参照されるが、あまり更新されないアイテムを転送する機能も実装しています。 </p>
   <p>以前のバージョンでは、Couchbase ServerはNRUに単一のビットを利用し、別のレプリケーションプロトコルを利用していましたが、二つの問題を引き起こしました: メタデータがアイテムの参照頻度や更新されたかどうかを反映できず、レプリケーションプロトコルではアクティブなvBucketからレプリカvBucketへ更新されたアイテムのNRUしか転送されませんでした。 二つ目の挙動はアクティブvBucket上のワーキングセットがレプリカvBucketのそれと著しく異なる可能性があることを意味します。 レプリケーションプロトコルを変更することで、レプリカvBucket内のワーキングセットがアクティブvBucket内のワーキングセットと同様になりました。</p>
   <p>NRUはサーバプロセスによって増加、減少され、アイテムがより頻繁に利用されているかどうかを示します。 より低いビットを持つアイテムはより低いスコアとなり、より頻繁に参照されていると判定されます。 ビットの値と関連するスコア、ステータスは以下の通りです:</p>
   <table>
    <tgroup cols="4">
     <colspec colname="col1"/>
     <colspec colname="col2"/>
     <colspec colname="col3"/>
     <colspec colname="col4"/>
     <thead>
      <row>
       <entry><b>バイナリNRU</b></entry>
       <entry><b>スコア</b></entry>
       <entry><b>アクセスパターン</b></entry>
       <entry><b>説明</b></entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>00</entry>
       <entry>0</entry>
       <entry>更新アクセスで00に設定される。 参照アクセス、アクセスなしで減少。</entry>
       <entry>最も頻繁に利用されるアイテム。</entry>
      </row>
      <row>
       <entry>01</entry>
       <entry>1</entry>
       <entry>参照アクセスで減少。</entry>
       <entry>頻繁に参照されるアイテム。</entry>
      </row>
      <row>
       <entry>10</entry>
       <entry>2</entry>
       <entry>初期値、参照アクセスで減少。</entry>
       <entry>新規アイテムのデフォルト値。</entry>
      </row>
      <row>
       <entry>11</entry>
       <entry>3</entry>
       <entry>データ除去のアイテムページャで増加される。</entry>
       <entry>あまり頻繁に利用されないアイテム。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <p>アイテムのNRUを変更するプロセスは二つあります: </p>
   <ul>
    <li>クライアントがアイテムを読み書きすると、サーバはNRUを減らし、アイテムのスコアを低くします。</li>
    <li>RAM内の頻繁に参照されるアイテムのリストを作成する日次の処理があります。 この処理が実行されると、サーバはNRUビットの一つを増加させます。</li>
   </ul>
   <p>この二つのプロセスはNRUを変更するため、これらはどのアイテムがデータ除去の候補になるかにも影響します。</p>
	<p>Couchbase Server設定でデータ除去の挙動を調整できます。
		例えば、アイテムの除去を開始する際のRAM使用量パーセンテージを指定したり、オリジナルデータよりレプリカデータでより頻繁にデータ除去を行うように指定したりできます。 Couchbaseはデフォルトの設定を使用することを推奨します。</p>
  </section>
  <section>
   <title>アイテムページャを理解する</title>
	 <p>アイテムページャプロセスは定期的に実行され、RAMからドキュメントを削除し、アイテムのキーとメタデータは残します。
		 アイテムで利用されたRAM容量が高水位を越えると(上方閾値)、メモリ利用量が低水位(下方閾値)に達するまで、アクティブとレプリカの両データが除去されます。
		 アクティブとレプリカデータの除去は、40%(アクティブ)と60%(レプリカ)の割合で、メモリ利用量が低水位に達するまで継続します。
		 高水位と低水位は両方ともRAM容量のパーセンテージで表現されます、80%など。</p>
	<p>ノードのRAM容量に対するパーセンテージを指定することで、高水位、低水位の変更が可能です、例: 80%。
		Couchbaseは以下のデフォルト設定を利用することを推奨します:</p>
   <table>
    <tgroup cols="3">
     <colspec colname="col1"/>
     <colspec colname="col2"/>
     <colspec colname="col3"/>
     <thead>
      <row>
       <entry><b>バージョン</b></entry>
       <entry><b>高水位</b></entry>
       <entry><b>低水位</b></entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>2.0</entry>
       <entry>75%</entry>
       <entry>60%</entry>
      </row>
      <row>
       <entry>2.0.1 and higher</entry>
       <entry>85%</entry>
       <entry>75% </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <p>アイテムページャは二つのフェーズでRAMからアイテムを除去します:</p>
   <ul>
    <li>
     <p><b>フェーズ1: NRUを元に除去</b>。 アイテムのNRUをスキャンし、スコアが3の全てのアイテムのリストを作成します。 NRUスコアが3のアイテムすべてを除去します。 RAM使用量をチェックし、低水位をまだ上回っている場合この処理を繰り返します。</p>
    </li>
    <li>
     <p><b>フェーズ2: アルゴリズムに基づく除去</b>。 全てのアイテムのNRUを1ずつインクリメントします。 NRUが3になったら、ランダムな数値を生成し、その数値が指定した確率よりも大きければそのアイテムを除去します。 確率は現在のメモリ利用量、低水位、そしてvBucketがアクティブかレプリカかどうかで決まる。 データ除去の確率は、vBucketがアクティブであれば、レプリカのvBucketよりも低くなります。 アクティブ、レプリカvBucketのデフォルトの確率は以下の通りです:</p>
    </li>
   </ul>
   <p>データ除去の確率はアクティブか レプリカvBucketかにより以下のようになります:</p>
   <table>
    <tgroup cols="2">
     <colspec colname="col1"/>
     <colspec colname="col2"/>
     <thead>
      <row>
       <entry>アクティブvBucket</entry>
       <entry>レプリカvBucket</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>60%</entry>
       <entry>40% </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </section>
 </conbody>
 <related-links>
  <linklist>

   <link href="../CLI/cbepctl-intro.dita"></link>
   <link href="../CLI/CBepctl/cbepctl-diskcleanup.dita"></link>
  </linklist>
 </related-links>
</concept>
