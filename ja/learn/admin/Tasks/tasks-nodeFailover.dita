<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic17798">
  <title>フェイルオーバの考慮事項</title>
  <shortdesc>ノードをフェイルオーバするとは、Couchbase Serverがそのノードをクラスタから削除し、他のノードにあるレプリケートしたデータをクライアントのリクエストで利用可能にすることです。</shortdesc>
  <body>
    <p> Couchbase Serverはクラスタ内でのデータレプリケーションを提供しているため、保存されたデータへのアクセスに影響させることなく、クラスタは一つ以上のノード障害へ対応できます。
			ノード障害発生時には、Couchbase Webコンソールから、そのノードに<term>failover</term>ステータスを設定し、問題を解決することができます。</p>
    <p>または、クラスタから自動的に障害ノードを削除し、縮退モードでクラスタを稼働させるように設定することもできます。
			この自動オプションを選択した場合、クラスタ内に残る稼働中のノードに対する負荷は増大します。
      クラスタがノード障害前と同じ状態で機能するためには、正常に機能するノードをクラスタに戻し、リバランスを実行して、ノード障害から復旧する必要があります。</p>
    <p>手動でフェイルオーバを実行しても、Couchbase Serverが自動的に実行するようにしても、障害の原因を解明する必要があります。
			そして、正常に機能するノードをセットアップし、そのノードを追加し、クラスタをリバランスします。
			ノード障害とフェイルオーバシナリオに対処する際は、ノードの交換および追加に関する以下のガイダンスを参考にしてください:</p>
    <ul>
      <li><p>ハードウェアやシステム障害が起因してノードがダウンした場合、新規の交換用ノードをクラスタに追加してリバランスしてください。</p></li>
      <li><p>クラスタのキャパシティ不足が原因でノードがダウンした場合、ノードの交換に加え、必要なキャパシティとするために必要な分だけノードを追加してください。</p></li>
      <li><p>ノードの障害が一時的なもので、ノードが再び機能する場合、そのノードをクラスタに再追加することもできます。</p></li>
    </ul>
		<p>フェイルオーバはノードの削除やノードのリバランスとは異なる操作であることに注意してください。
			一般的には、正常に機能しているノードをメンテナンスなどの理由でクラスタから削除しますが、一方、フェイルオーバは正常に動作していないノードに対して実行します。</p>
		<p>クラスタから機能しているノードを削除するには、Couchbase Webコンソールを利用し、削除するノードを指定します。
			そしてクラスタをリバランスし、そのノードへのデータリクエストが他のノードで処理できるようにします。
			削除したいノードはまだ機能しているので、リバランスが完了するまでデータリクエストを処理することができます。
			この時点で、クラスタ内の他のノードによりデータリクエストが処理されることになります。 すなわち、データサービスを破壊するようなことも、データを消失してしまうこともなく、ノードを削除してクラスタをリバランスできるのです。
			機能しているノードを運用管理目的で削除したい場合、フェイルオーバではなく、Removeを利用し、リバランスを実行してください。</p>
    <p>機能するノードをフェイルオーバする場合、フェイルオーバは即座にノードをクラスタから削除するため、データロスが発生する可能性があります。 まだ他のノードへレプリケートされていないデータは、ディスクに永続化されていない場合完全に消失してしまいます。</p>
    <p>フェイルオーバの実行に関するより詳細な情報は次もご参照ください:</p>
    <ul>
      <li><itemgroup>自動フェイルオーバ。</itemgroup> ノードが応答なし、または稼働していないと判断されると、ノードを自動的にフェイルオーバとしてマークします。 自動フェイルオーバ機能には設計上いくつかの制限があります。 </li>
      <li><itemgroup>フェイルオーバの実行。</itemgroup> 手動または自動のフェイルオーバのどちらを利用するかで、クラスタを完全に機能する状態へ戻すために、いくつかの手順を実行する必要があります。</li>
      <li><itemgroup>フェイルオーバ後にノードを追加する。</itemgroup> フェイルオーバしたノードの問題を解決したら、ノードをクラスタへ再追加することができます。 </li>
    </ul>
    
    
    <section><title>フェイルオーバ手段の選択</title>
      <p>フェイルオーバはクラスタの性能を縮小させてしまうため、フェイルオーバの状況をどのように処理すべきかをよく検討するべきです。
				自動フェイルオーバを利用すると、ユーザ操作なしにノードをフェイルオーバできますが、ノード障害を発生させた問題の調査や特定は難しくなります。
				クラスタを健全な状態に戻すためにはリバランスを実行する必要もあります。</p>
			<p>手動フェイルオーバによりクラスタを管理する場合、クラスタを監視し、問題の発生を検知できるようにします。 問題が発生したら、手動でフェイルオーバを実行し、リバランスを行います。 この手順では、より多くの監視や手動の操作が必要で、加えて、フェイルオーバとリバランスを実行するまでの間、クラスタやデータアクセスが縮退してしまう可能性があります。</p>
			<p>次のセクションでは二つの手段と、それぞれの問題についてより詳しく解説します。</p>
			<p><b>自動フェイルオーバの考慮事項</b></p><p>自動でコンポーネントを取り除くには、どんな分散システムでも問題が付き物です。 問題の原因を特定できない場合、または残りのシステムにかかる負荷を理解していない場合、自動フェイルオーバは問題を解決するどころか、より多くの問題を発生させる可能性があります。 次のような状況では、問題を誘発する可能性があります:</p>
      
      <ul>
        <li><b>フェイルオーバによる連鎖反応(Thundering Herd)の回避</b></li>
      </ul><p>5ノードのCouchbase Serverクラスタが、ネットワーク負荷キャパシティの80-90%で稼働しているとします。 すべては順調に稼働していますが、クラスタのキャパシティは限界です。 ノード障害が発生し、ソフトウェアが自動的にノードをフェイルオーバしたとします。 残りの4ノードでは負荷が増大し、正常に処理することはできないでしょう。</p><p>結果として負荷が増加することで、他のノードもダウンし、自動的にフェイルオーバされてしまいます。 これらの障害は連鎖し、結果的にクラスタ全体の消失へとつながる可能性があります。 単一ノード障害発生時には、1/5のリクエストを処理できない方が、クラスタ全体の障害によってまったくリクエストを処理できないことよりも理想的であることは明確です。</p><p>この場合の解決策は、単一ノード障害が発生してもクラスタの運用を続け、新しいサーバをクラスタに追加し、失われたキャパシティを補填して、ダウンしたノードを削除としてマークし、リバランスを実行することです。
				こうすれば、クラスタ全体が利用不可となる代わりに、部分的な停止で済みます。</p>
			<p>もう一つの予防策は、予期せぬノード障害発生時にも十分な余剰のキャパシティを確保し、レプリカへの引き継ぎができるようにすることです。</p>
      
      <ul>
        <li><b>ネットワーク分断とフェイルオーバ</b></li>
      </ul><p>ネットワークデバイスの故障が原因でネットワークが分割されてしまう、ネットワーク分断やスプリットブレインの状況を考慮し、Couchbaseは以下の制約付きで自動フェイルオーバを実装しています:</p>
		<ul>
			<li>自動フェイルオーバは最低でも1クラスタに3台のノードが必要。
				これは、ネットワーク分断が発生した際に、2ノードのクラスタがお互いのノードをフェイルオーバすることを防ぎ、データの整合性と一貫性を保護するためです。</li>
				<li>自動フェイルオーバはノードが1台だけダウンしたときのみ実行される。
					これはネットワーク分断発生時に、2つ以上の部分的なクラスタがお互いをフェイルオーバすることを防ぎ、データの整合性と一貫性を保護するためです。</li>
				<li>自動フェイルオーバは管理操作を必要とする前に一度だけ発動する。
					これは、フェイルオーバの連鎖や、以後の性能や安定性の劣化を防ぐためです。
					多くの場合、クラスタが機能できなくなるまで劣化し続けるよりも、データセットの小さな部分にアクセスできなくなる方が望ましいでしょう。</li>
				<li>自動フェイルオーバはノードがダウンしてから自動フェイルオーバを実行するまでに30秒の遅延時間を設けています。
					これは一時的なネットワーク障害や、システムの遅延によって、誤ってノードがフェイルオーバされることを防ぎます。</li>
      </ul><p>ネットワーク分断の際、特定の制限により許可された場合のみ、自動フェイルオーバが実行されます。 例えば、5ノードのクラスタで、1つのノードだけが分断された場合、それは自動でフェイルオーバされます。
				2つ以上のノードが分断された場合、自動フェイルオーバは実行されません。 自動フェイルオーバ後、リセットする管理操作が必要になります。 自動フェイルオーバをリセットする前に、他のノードがダウンすると、自動フェイルオーバは実行されません。 </p><ul>
        <li><b>不正に動作しているノードへの対処</b></li>
      </ul><p>あるノードがクラスタへの接続を失ったか、クラスタへの接続を失ったかのように動作する場合があります。 クラスタで自動フェイルオーバを有効にしている場合、そのノードは単一ノードのクラスタとなります。 結果としてこのクラスタは前述の分断状態と同様になります。</p><p>この場合、ネットワークに問題があるノードをフェイルオーバするために十分なノードがクラスタに存在することを確認してください。
				十分なキャパシティが無いと判断した場合、ノードを追加し、問題のノードをフェイルオーバした後にキャパシティを補填します。</p>
			<p><b>手動フェイルオーバとモニタリング</b></p><p>モニタリング経由で手動フェイルオーバを行う場合、二つ方法があり、一つは人による監視、もう一つはCouchbase Serverクラスタの外部システムを利用する方法です。
			 外部モニタリングシステムはクラスタやノードの実行環境を監視でき、より多くの情報を元に判断できるようになります。
				手動フェイルオーバの手法を選択した場合、このほかにも意識すべき問題があります。
				自動フェイルオーバは潜在的な問題がありますが、手動またはモニタリングによるフェイルオーバにも潜在的な問題があります。</p><ul>
        <li><b>人の介入</b></li>
				</ul><p>アラートに対して次の行動に関する意思決定をする人員を確保することは一つの選択肢です。
				人間が広範囲のデータ、観測、経験を考慮し、最適な方法で状況を解決できるユニークな存在です。
				多くの組織では、人が影響に対する考慮をしないままにフェイルオーバを自動化することを許可していません。
				人の介入を行うことの問題点はコンピュータベースのモニタリングシステムを利用することに比べ、対応が遅くなるということです。</p><ul>
        <li><b>外部モニタリング</b></li>
      </ul><p>もう一つの選択肢はCouchbase REST APIを利用してクラスタをモニタリングするシステムを利用することです。
        このような外部システムは、Couchbase Serverのスコープ外のシステムコンポーネントに関しても考慮できるため、ノードのフェイルオーバにとって優位な位置に存在します。</p>
			<p>例えば、モニタリングソフトウェアは、Couchbaseクラスタが依存するネットワークスイッチがダウンしていることを検知できます。 システムはCouchbase Serverノードをフェイルオーバしても状況は改善しないことが分かるため、ノードのフェイルオーバはしません。</p>
			<p>モニタリングシステムはCouchbase Server周辺のコンポーネントが機能しているか、クラスタ内の様々なノードが健全であるかを判断することもできます。
				モニタリングシステムが、問題は単一のノードだけで起きており、クラスタ内の残りのノードで集約したトラフィックを処理できると判断すれば、システムからREST APIやコマンドラインツールを利用してそのノードをフェイルオーバすることもできます。</p></section>

    <section><title>自動フェイルオーバの利用</title><p>Couchbase Serverの自動フェイルオーバには多くの制約があります。 これは自動フェイルオーバを利用する際に発生する可能性のある問題を回避するためです。 </p><ul>
        <li><p><b>デフォルトでは無効</b> 自動フェイルオーバはデフォルトでは無効となっています。 これは明示的に有効とされるまで、Couchbase Serverが自動フェイルオーバを利用することを防止するためです。</p></li>
        <li><p><b>最小ノード数</b> 自動フェイルオーバは最低でも3台のノードそ持つクラスタでしか利用できません。</p></li>
      </ul><p>設定された遅延時間内に、同時に2台以上のノードがダウンした場合、自動フェイルオーバシステムはいずれのノードもフェイルオーバしません。</p><ul>
				<li><p><b>人の介入が必要</b> 自動フェイルオーバは、人の介入が必要になる前に一つのノードだけをフェイルオーバします。
						これはクラスタ内の全ノードがダウンする連鎖反応を防止するためです。</p></li>
				<li><p><b>フェイルオーバの遅延時間</b> ノードがフェイルオーバされるまでに、最低でも30秒の遅延時間が必要です。
						この時間を延ばすことはできますが、ソフトウェアはダウンしているかもしれないノードに対して複数回の死活監視を実行するようにハードコーディングされています。
						これは機能しているが遅いノードのフェイルオーバや、ネットワーク接続問題によりフェイルオーバが発動することを防ぐためです。 </p></li>
      </ul><p>REST APIを利用して、ノード障害が発生し、ノードが自動でフェイルオーバされた際にCouchbase Serverがメールで通知を送信するように設定することができます。 </p>
      <p>自動フェイルオーバが発生した後、Couchbaseクラスタは他のノードがレプリカデータを提供できることに依存しています。 クラスタを完全に機能する状態へと戻すためにリバランスを実行すべきです。 </p>
      <p><b>自動フェイルオーバカウンタのリセット</b></p><p>ノードが自動的にフェイルオーバされた後、Couchbase Serverはノードがフェイルオーバされたことを示す内部カウンタをインクリメントします。
				このカウンタは、フェイルオーバを引き起こした問題が特定され、解決されるまで、その他のノードが自動的にフェイルオーバされることを防止します。
				内部カウンタでノードがフェイルオーバされたことを示している場合、サーバはクラスタ内の他のノードを自動フェイルオーバしません。 このカウンタをリセットして、クラスタ内の自動フェイルオーバを再度有効にする必要があります。</p>
			<p>重要</p><p>自動フェイルオーバはノードの問題が解決し、クラスタが完全に機能する状態に戻ってからリセットしてください。</p>
			<p>REST APIを利用してカウンタをリセットできます:</p><codeblock><codeph>&gt; curl -i -u cluster-username:cluster-password \
    http://localhost:8091/settings/autoFailover/resetCount
</codeph></codeblock>
    </section>
    <section><title>ノードのフェイルオーバを実行する</title><p>ハードウェアやシステム障害によりクラスタからノードを削除する必要がある場合、そのノードのフェイルオーバを実行する必要があります。
				これは、Couchbase Serverが、クラスタ内の他の機能しているノードからレプリカデータを利用するということです。</p>
      
			<note type="important">運用管理、またはアップグレード操作として、機能しているノードをクラスタから削除するためにフェイルオーバを利用しないでください。
				これはフェイルオーバを実行すると、他のノードのレプリカデータがアクティブとなり、クラスタ全体のキャパシティが縮小してしまうからです。
        フェイルオーバされるノード上の、他のノードにレプリケートされていない、もしくはディスクに永続化されていないデータは消失します。 </note>
        
        <p>ノードのフェイルオーバは二つの方法で実行できます:</p><ul>
        <li><b>Webコンソールの利用</b></li>
      </ul><p>Webコンソールの<codeph>Management -&gt; Server Nodes</codeph> セクションに移動します。
        フェイルオーバしたいノードの<codeph>Fail Over</codeph>ボタンをクリックします。
				クラスタがDownとして判定したノードのみフェイルオーバできます。</p><p>Webコンソールに警告メッセージが表示されます。</p><p><codeph>Fail Over</codeph>をクリックし、ノードをフェイルオーバします。
				<codeph>Cancel</codeph>を選択することもできます。</p><ul>
        <li><b>コマンドラインツールの利用</b></li>
				</ul><p><codeph>couchbase-cli</codeph>の<codeph>failover</codeph>コマンドを利用して、複数のノードをフェイルオーバできます。
				ノードをフェイルオーバするには、フェイルオーバするノードのIPアドレスと、標準のポートでない場合はポートを指定します。
					例:</p><codeblock><codeph>```
&gt; ﻿couchbase-cli failover --cluster=localhost:8091\
    -u cluster-username -p cluster-password\
    --server-failover=192.168.0.72:8091
```
</codeph></codeblock>
<p>成功すると、ノードがフェイルオーバされたと表示されます。</p>
<p>ノードをフェイルオーバした後は問題の原因を解決し、クラスタを完全に機能する状態に戻してください。 </p>
    </section>
    <section><title>フェイルオーバ後の対応</title><p>自動でも、手動でもノードをフェイルオーバすると、クラスタのキャパシティは縮小します。 ノードをフェイルオーバしたら:</p><ul>
        <li><p>クラスタ内の各データバケットに対する利用可能なノード数は一つ減少します。</p></li>
        <li><p>フェイルオーバしたノードが担当していたデータのレプリカは、クラスタ内の他のノード上で有効化されます。</p></li>
        <li><p>残りのノードがデータへのリクエストを処理しなくてはなりません。</p></li>
				</ul><p>ノードをフェイルオーバした後、リバランスを実行すべきです。
				リバランス操作は:</p><ul>
        <li><p>クラスタ内の残りのノード間でデータを再分配します。</p></li>
        <li><p>残りのノードで全バケットのレプリカデータを再作成します。</p></li>
        <li><p>クラスタを設定された運用可能な状態に復元します。</p></li>
      </ul><p>クラスタを完全に機能する状態とするために、フェイルオーバ後に一つあるいは複数のノードをクラスタへと追加することもあるでしょう。 障害ノードを交換して、さらにノードを追加すれば、以前よりもキャパシティを拡張することができます。 </p>
    </section>
    <section><title>フェイルオーバしたノードの再追加</title><p>ノード障害を引き起こした問題を回収できたなら、フェイルオーバしたノードをクラスタに再追加することができます。
				Couchbase Serverがノードをフェイルオーバとしてマークした後も、データはそのノード上のディスクに残っています。 フェイルオーバされたノードはもはや、元のクラスタと<i>同期されていない</i>状態です; そのノードはデータリクエストを処理することもなく、レプリカデータを受信することもありません。</p>
			<p>フェイルオーバしたノードをクラスタに再追加する際、クラスタはこれを新規ノードとして扱います。
				このため、ノードをクラスタに追加後、リバランスが必要です。
				これは、そのノードのディスクに保存されていたいかなるデータも、リバランスを実行すると削除されることを意味します。</p>
			<p><b>クラスタへの再追加前にデータをコピーまたは削除する</b></p><p>フェイルオーバしたノードをクラスタに再追加する前に、永続化されたデータファイルを移動するか削除することがベストプラクティスです。
				ファイルを保持したい場合は、他のディスクやEBSボリュームといった他のロケーションにファイルをコピーまたは移動します。
				クラスタにノードを再追加しリバランスすると、データファイルは削除され、再作成、再生成されます。</p></section>
  </body>
  <related-links>
    <linklist>
      <link href="../Tasks/tasks-rebalance.dita"/>
      <link href="../UI/ui-settings.dita"/>
      <link href="../REST/rest-cluster-autofailover-intro.dita"/>
      <link href="../REST/rest-cluster-email-notifications.dita"/>
    </linklist>
  </related-links>
</topic>
