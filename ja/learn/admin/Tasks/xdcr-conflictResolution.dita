<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic_dz3_wk4_14">
  <title>XDCRのコンフリクト解決</title>
  <shortdesc>XDCRはソースと宛先クラスタの間で異なるドキュメントのバージョンに対し、自動的にコンフリクトの解決を実行します。</shortdesc>
  <body>

      <p>アルゴリズムはソース、宛先の両クラスタで一貫して同一のドキュメントが選択できるように設計されています。 各保存されたドキュメントごとに、XDCRはメタデータをチェックし、コンフリクトを解決します。 次の項目を確認します:</p><ul>
          <li><p>シーケンス番号、各データ変更でインクリメントされる</p></li>
          <li><p>CAS値</p></li>
          <li><p>ドキュメントのフラグ</p></li>
          <li><p>有効期限(TTL)</p></li>
        </ul><p>ドキュメントが最大のバージョン番号ではない場合、このドキュメントに対する変更は保存、またはレプリケートされません; 代わりに、最大スコアを持つドキュメントが両クラスタ上で優先されます。 コンフリクトの解決は自動的に行われ、手動で補正やドキュメントの選択を行う必要はありません。</p><p>デフォルトでは各ドキュメントにつき2回ずつメタデータをフェッチしてから、宛先クラスタへとドキュメントをレプリケートします。 XDCRはソースクラスタ上のメタデータをフェッチし、ドキュメントのリビジョン番号を確認します。 そしてこの番号と、宛先クラスタ上のリビジョン番号とを比較し、より大くのリビジョンを持つドキュメントを'勝者'とします。</p><p>XDCRは、ソースクラスタのドキュメントがコンフリクトの解決で勝者と判断すると、レプリケーションキューにそのドキュメントを登録します。 ソースクラスタのドキュメントの方が小さな変更数であった場合、コンフリクトの解決で敗者となり、このドキュメントはXDCRのレプリケーションキューに登録されません。 ドキュメントが宛先クラスタに到達すると、このクラスタはもう一度メタデータをリクエストし、宛先クラスタのドキュメントが初回のチェックから変更されていないかを確認します。 ソースクラスタから送られたドキュメントがまだ'勝者'であるなら、宛先クラスタのディスク上に永続化されます。 宛先クラスタは少ない変更数を持つドキュメントのバージョンを削除します。</p><p>重要な点は、ドキュメントの変更回数が、XDCRによってドキュメントのバージョンを保持するか否かを決定するための主な要素であるということです。 このため、もっとも最近更新されたドキュメントがコンフリクトの解決で必ずしも勝者となるとは限りません。 もし双方のドキュメントが同一の更新回数であった場合、XDCRはドキュメントのその他のメタデータを元に勝者を選択します。 正確にどちらのドキュメントが最後に更新されたものなのかを特定することは、分散システムにおいてしばしば困難となります。 Couchbase Serverが利用しているアルゴリズムは、各クラスタが独立してどのドキュメントが勝者なのかを一貫して決定できることを保証しています。</p>
  </body>
</topic>
