<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic_pjr_d24_14">
  <title>XDCRのパフォーマンスチューニング</title>
  <shortdesc>XDCRのパフォーマンスはWebコンソールかRESTで、XDCRの詳細設定にてチューニングできます。</shortdesc>
  <body>
      
		<p> デフォルトでは、XDCRは256バイトを超えるドキュメントについて、コンフリクトの解決を実行する前に、宛先クラスタから2回メタデータを取得します。
			コンフリクトの解決に失敗したドキュメントは、宛先クラスタで削除されます。</p>
      
      <p>このパラメータで指定されたバイト数よりも小さなドキュメントの場合、XDCRはソースクラスタ上のメタデータを取得せずに、即座にレプリケーションキューに登録されます。 ソースクラスタでドキュメントが削除されると、XDCRはこのドキュメントのメタデータをフェッチせずに、この更新を宛先クラスタへと送信します。 宛先クラスタにドキュメントが到達すると、XDCRはメタデータをフェッチし、ドキュメント間のコンフリクトの解決を実行します。 ドキュメントがコンフリクト解決で'敗者'となった場合、Couchbase Serverは宛先クラスタ上からそれを削除し、宛先クラスタ上のバージョンを保持します。 この新機能は、特に小さなドキュメントをレプリケートする際に、レプリケーションのレイテンシを向上します。</p>
      
      <p>この設定の変更にはトレードオフがあります。 ドキュメントサイズに対して小さな値を設定すると、XDCRは頻繁にメタデータをチェックします。 するとレプリケーション中のレイテンシは大きくなり、レプリケーションキューに登録する前にメタデータを取得し、コンフリクト解決を実行するために宛先のメタデータを再度取得することになります。 利点としては、XDCRが'敗者'となるドキュメントは送信しないため、ネットワーク帯域を無駄に利用することがなくなります。</p>
      
      <p>ドキュメントサイズに対して非常に大きな値を設定すると、XDCRがメタデータをフェッチする回数が減り、レプリケーション中のレイテンシが向上します。 一方で、XDCRが即座にレプリケーションキューに登録する割合が増えるため、ネットワークに過度の負荷がかかる可能性もあります、特に多数の並列レプリケータ数を設定している場合注意してください。 これはXDCRで、ネットワーク帯域を無駄に利用する、宛先のコンフリクト解決で確実に'敗者'となるドキュメントの送信数を増加させます。</p>
      
      <note type="note">XDCRは削除したドキュメントのメタデータはフェッチしません。</note>
      
      <section><title>ドキュメント閾値の変更</title>
        
        <p>RESTでドキュメント閾値を変更するには、<codeph>/settings/replications optimisticReplicationThreshold</codeph>のURIとXDCRの詳細設定パラメータを利用します。
        もしくは、XDCRレプリケーションの<uicontrol>XDCR Optimistic Replication Threshold</uicontrol>設定を変更します。</p>
      </section>
      
      
      <section><title>楽観的レプリケーションのモニタリング</title>
      <p>この設定の影響を確認するもっとも簡単な方法は、Couchbase Webコンソールにあります。 Data BucketsタブのIncoming XDCR Operationsで、<codeph>metadata reads per sec</codeph>と、<codeph>sets per sec</codeph>を比較します。 </p>
      <image href="../images/monitor_optmized_xdcr.png"/>
      <p>ドキュメントサイズに対して小さな閾値を設定した場合、<codeph>metadata reads per sec</codeph>が、<codeph>sets per sec</codeph>の約2倍となります。 ドキュメントサイズに対して大きな閾値を設定した場合、一回目のメタデータフェッチを行わなくなるため、
<codeph>metadata reads per sec</codeph>は、<codeph>sets per sec</codeph>と同程度になります。</p>
      <p>その他の確認ポイントとして、ソースバケットのノード上の、<codeph>/opt/couchbase/var/lib/couchbase/logs</codeph>にあるXDCRのログを確認します。
        ログファイルの命名規則は、<codeph>xdcr.1</codeph>、<codeph>xdcr.2</codeph>、のようになります。 ログの中には以下のようなエントリが出力されます:</p>
      <codeblock>
out of all 11 docs, number of small docs (including dels: 2) is 4,
number of big docs is 7, threshold is 256 bytes,
after conflict resolution at target ("http://Administrator:asdasd@127.0.0.1:9501/default%2f3%3ba19c9d4e733a97fa7cb38daa4113d034/"),
out of all big 7 docs the number of docs we need to replicate is: 5;
total # of docs to be replicated is: 9, total latency: 142 ms
</codeblock>
      <p>一行目は、4つのドキュメントが閾値を下回り、7つのドキュメントではメタデータを2回チェックし、5つの大きなドキュメントと、4つの小さなドキュメントをレプリケートしたことを示しています。 全11のドキュメントをチェックしてレプリケートするのに142ミリ秒経過しました。</p>
    </section>
  </body>

</topic>
